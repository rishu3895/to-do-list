(()=>{"use strict";const t=()=>({myHeading:(t,e)=>{const n=document.createElement("h3");return n.innerHTML=e,n.classList=t,{heading1:n}},myInput:(t,e,n)=>{const o=document.createElement("input");return o.type=t,o.placeholder=e,o.classList=n,{input1:o}},myButton:(t,e)=>{const n=document.createElement("button");return n.innerHTML=e,n.classList=t,{myButton:n}},myDiv:(t,e)=>{const n=document.createElement("div");return n.classList=t,n.innerHTML=e,{myDiv:n}}}),e=function(){const e=t().myDiv("nav-bar-class","").myDiv;if(localStorage.getItem("name"))e.innerHTML=`Welcome ${localStorage.getItem("name")}`;else{const t=prompt("Enter your name");localStorage.setItem("name",t),console.log("phle se naam nahi hai"),e.innerHTML=`welcome ${t}`}return e}(),n=document.querySelector(".content");n.appendChild(e);const o=function(){const e=t().myDiv("quote-author-class","").myDiv,n=t().myDiv("quote-class","").myDiv,o=t().myDiv("author-class","").myDiv;return e.appendChild(n),e.appendChild(o),async function(){try{const t=await fetch("https://api.quotable.io/random");if(!t.ok)throw t.statusText;const e=await t.json();n.innerHTML=e.content,o.innerHTML=`-${e.author}`}catch(t){console.log(t),alert("sorry could not find out a new quote hope you are doing well")}}(),e}();console.log(o),n.appendChild(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL21vZHVsZXMvZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL21vZHVsZXMvbmF2YmFyLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvbW9kdWxlcy9yYW5kb21RdW90ZUdlbmVyYXRvci5qcyJdLCJuYW1lcyI6WyJteUVsZW1lbnQiLCJteUhlYWRpbmciLCJjbGFzc0h0bWwiLCJpbm5lckh0bWwiLCJoZWFkaW5nMSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImNsYXNzTGlzdCIsIm15SW5wdXQiLCJpbnB1dFR5cGUiLCJpbnB1dFBsYWNlaG9sZGVyIiwiaW5wdXRDbGFzcyIsImlucHV0MSIsInR5cGUiLCJwbGFjZWhvbGRlciIsIm15QnV0dG9uIiwiYnV0dG9uQ2xhc3MiLCJidXR0b25IdG1sIiwibXlEaXYiLCJkaXZDbGFzcyIsImRpdkh0bWwiLCJuYXZEaXYiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibmFtZSIsInByb21wdCIsInNldEl0ZW0iLCJjb25zb2xlIiwibG9nIiwibmF2QmFyIiwiY29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsInF1b3RlQXV0aG9yRGl2IiwicXVvdGVEaXYiLCJxdW90ZSIsImF1dGhvciIsImFzeW5jIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwianNvbiIsImVyciIsImFsZXJ0IiwiZ2VuZXJhdGVRdW90ZSIsInJhbmRvbVF1b3RlR2VuZXJhdG9yIl0sIm1hcHBpbmdzIjoibUJBQUEsTUFBTUEsRUFBWSxLQTRCUCxDQUFDQyxVQTNCVSxDQUFDQyxFQUFVQyxLQUN6QixNQUFNQyxFQUFXQyxTQUFTQyxjQUFjLE1BR3hDLE9BRkFGLEVBQVNHLFVBQVlKLEVBQ3JCQyxFQUFTSSxVQUFZTixFQUNkLENBQUVFLGFBdUJNSyxRQXJCSCxDQUFDQyxFQUFXQyxFQUFrQkMsS0FDMUMsTUFBTUMsRUFBT1IsU0FBU0MsY0FBYyxTQUlwQyxPQUhBTyxFQUFPQyxLQUFLSixFQUNaRyxFQUFPRSxZQUFZSixFQUNuQkUsRUFBT0wsVUFBVUksRUFDVixDQUFDQyxXQWdCZ0JHLFNBZFgsQ0FBQ0MsRUFBYUMsS0FDM0IsTUFBTUYsRUFBV1gsU0FBU0MsY0FBYyxVQUd4QyxPQUZBVSxFQUFTVCxVQUFVVyxFQUNuQkYsRUFBU1IsVUFBVVMsRUFDWixDQUFDRCxhQVUwQkcsTUFSeEIsQ0FBQ0MsRUFBVUMsS0FDckIsTUFBTUYsRUFBTWQsU0FBU0MsY0FBYyxPQUduQyxPQUZBYSxFQUFNWCxVQUFVWSxFQUNoQkQsRUFBTVosVUFBVWMsRUFDVCxDQUFDRixZQ3RCVkcsRUNBTixXQUNJLE1BQU1BLEVBQU90QixJQUFZbUIsTUFBTSxnQkFBZ0IsSUFBSUEsTUFDbkQsR0FBSUksYUFBYUMsUUFBUSxRQU9yQkYsRUFBT2YsVUFBVSxXQUFXZ0IsYUFBYUMsUUFBUSxjQVBwQixDQUM3QixNQUFNQyxFQUFLQyxPQUFPLG1CQUNsQkgsYUFBYUksUUFBUSxPQUFPRixHQUM1QkcsUUFBUUMsSUFBSSx5QkFDWlAsRUFBT2YsVUFBVSxXQUFXa0IsSUFLaEMsT0FBT0gsRURYRVEsR0FDUEMsRUFBUTFCLFNBQVMyQixjQUFjLFlBQ3JDRCxFQUFRRSxZQUFZWCxHQUNwQixNQUFNWSxFRUpOLFdBQ0ksTUFDTUMsRUFBU25DLElBQVltQixNQUFNLHFCQUFxQixJQUFJQSxNQUNwRGlCLEVBQU1wQyxJQUFZbUIsTUFBTSxjQUFjLElBQUlBLE1BQzFDa0IsRUFBT3JDLElBQVltQixNQUFNLGVBQWUsSUFBSUEsTUFxQmxELE9BcEJBZ0IsRUFBU0YsWUFBWUcsR0FDckJELEVBQVNGLFlBQVlJLEdBQ3JCQyxpQkFFSSxJQUNJLE1BQU1DLFFBQWVDLE1BVGYsa0NBVU4sSUFBSUQsRUFBU0UsR0FDVCxNQUFNRixFQUFtQixXQUU3QixNQUFNRyxRQUFXSCxFQUFTRyxPQUMxQk4sRUFBTTdCLFVBQVVtQyxFQUFLWCxRQUNyQk0sRUFBTzlCLFVBQVUsSUFBSW1DLEVBQUtMLFNBRTVCLE1BQU9NLEdBQ0xmLFFBQVFDLElBQUljLEdBQ1pDLE1BQU0saUVBSWRDLEdBQ09WLEVGckJVVyxHQUNyQmxCLFFBQVFDLElBQUlLLEdBQ1pILEVBQVFFLFlBQVlDLEkiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG15RWxlbWVudCA9ICgpID0+IHtcbiAgICBjb25zdCBteUhlYWRpbmcgPSAoY2xhc3NIdG1sLGlubmVySHRtbCkgPT4ge1xuICAgICAgICBjb25zdCBoZWFkaW5nMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgICAgIGhlYWRpbmcxLmlubmVySFRNTCA9IGlubmVySHRtbDtcbiAgICAgICAgaGVhZGluZzEuY2xhc3NMaXN0ID0gY2xhc3NIdG1sO1xuICAgICAgICByZXR1cm4geyBoZWFkaW5nMSB9O1xuICAgIH1cbiAgICBjb25zdCBteUlucHV0ID0gKGlucHV0VHlwZSwgaW5wdXRQbGFjZWhvbGRlciwgaW5wdXRDbGFzcykgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dDE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgaW5wdXQxLnR5cGU9aW5wdXRUeXBlO1xuICAgICAgICBpbnB1dDEucGxhY2Vob2xkZXI9aW5wdXRQbGFjZWhvbGRlcjtcbiAgICAgICAgaW5wdXQxLmNsYXNzTGlzdD1pbnB1dENsYXNzO1xuICAgICAgICByZXR1cm4ge2lucHV0MX07XG4gICAgfVxuICAgIGNvbnN0IG15QnV0dG9uID0gKGJ1dHRvbkNsYXNzLCBidXR0b25IdG1sKSA9PiB7XG4gICAgICAgIGNvbnN0IG15QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIG15QnV0dG9uLmlubmVySFRNTD1idXR0b25IdG1sO1xuICAgICAgICBteUJ1dHRvbi5jbGFzc0xpc3Q9YnV0dG9uQ2xhc3M7XG4gICAgICAgIHJldHVybiB7bXlCdXR0b259O1xuICAgIH1cbiAgICBjb25zdCBteURpdiA9IChkaXZDbGFzcywgZGl2SHRtbCkgPT4ge1xuICAgICAgICBjb25zdCBteURpdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbXlEaXYuY2xhc3NMaXN0PWRpdkNsYXNzO1xuICAgICAgICBteURpdi5pbm5lckhUTUw9ZGl2SHRtbDtcbiAgICAgICAgcmV0dXJuIHtteURpdn07XG4gICAgfVxuICAgIFxuXG4gICAgcmV0dXJuIHtteUhlYWRpbmcsIG15SW5wdXQsIG15QnV0dG9uLCBteURpdn07XG59O1xuZXhwb3J0IHtteUVsZW1lbnR9OyIsImltcG9ydCB7bmF2QmFyfSBmcm9tICcuL21vZHVsZXMvbmF2YmFyJztcbmltcG9ydCB7Z2VuZXJhdGVRdW90ZSwgcmFuZG9tUXVvdGVHZW5lcmF0b3J9IGZyb20gJy4vbW9kdWxlcy9yYW5kb21RdW90ZUdlbmVyYXRvcic7XG5jb25zdCBuYXZEaXY9bmF2QmFyKCk7XG5jb25zdCBjb250ZW50PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50Jyk7XG5jb250ZW50LmFwcGVuZENoaWxkKG5hdkRpdik7XG5jb25zdCBxdW90ZUF1dGhvckRpdj1yYW5kb21RdW90ZUdlbmVyYXRvcigpO1xuY29uc29sZS5sb2cocXVvdGVBdXRob3JEaXYpO1xuY29udGVudC5hcHBlbmRDaGlsZChxdW90ZUF1dGhvckRpdik7XG4vLyBjb250ZW50LmFwcGVuZENoaWxkKHF1b3RlKTtcbi8vIGNvbnNvbGUubG9nKHR5cGVvZihxdW90ZSkpO1xuIiwiaW1wb3J0IHtteUVsZW1lbnR9IGZyb20gJy4vZWxlbWVudHMnO1xuXG5mdW5jdGlvbiBuYXZCYXIgKCkgIHtcbiAgICBjb25zdCBuYXZEaXY9bXlFbGVtZW50KCkubXlEaXYoJ25hdi1iYXItY2xhc3MnLCcnKS5teURpdjtcbiAgICBpZighbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25hbWUnKSl7XG4gICAgICAgIGNvbnN0IG5hbWU9cHJvbXB0KCdFbnRlciB5b3VyIG5hbWUnKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25hbWUnLG5hbWUpO1xuICAgICAgICBjb25zb2xlLmxvZygncGhsZSBzZSBuYWFtIG5haGkgaGFpJyk7XG4gICAgICAgIG5hdkRpdi5pbm5lckhUTUw9YHdlbGNvbWUgJHtuYW1lfWA7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIG5hdkRpdi5pbm5lckhUTUw9YFdlbGNvbWUgJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmFtZScpfWA7XG4gICAgfVxuICAgIHJldHVybiBuYXZEaXY7XG59XG5leHBvcnQge25hdkJhcn07IiwiaW1wb3J0IHtteUVsZW1lbnR9IGZyb20gJy4vZWxlbWVudHMnXG5mdW5jdGlvbiByYW5kb21RdW90ZUdlbmVyYXRvcigpe1xuICAgIGNvbnN0IHdlYnNpdGU9XCJodHRwczovL2FwaS5xdW90YWJsZS5pby9yYW5kb21cIjtcbiAgICBjb25zdCBxdW90ZURpdj1teUVsZW1lbnQoKS5teURpdigncXVvdGUtYXV0aG9yLWNsYXNzJywnJykubXlEaXY7XG4gICAgY29uc3QgcXVvdGU9bXlFbGVtZW50KCkubXlEaXYoJ3F1b3RlLWNsYXNzJywnJykubXlEaXY7XG4gICAgY29uc3QgYXV0aG9yPW15RWxlbWVudCgpLm15RGl2KCdhdXRob3ItY2xhc3MnLCcnKS5teURpdjtcbiAgICBxdW90ZURpdi5hcHBlbmRDaGlsZChxdW90ZSk7XG4gICAgcXVvdGVEaXYuYXBwZW5kQ2hpbGQoYXV0aG9yKTtcbiAgICBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1b3RlKCl7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlPWF3YWl0IGZldGNoKHdlYnNpdGUpO1xuICAgICAgICAgICAgaWYoIXJlc3BvbnNlLm9rKXtcbiAgICAgICAgICAgICAgICB0aHJvdyhyZXNwb25zZS5zdGF0dXNUZXh0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QganNvbj1hd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBxdW90ZS5pbm5lckhUTUw9anNvbi5jb250ZW50O1xuICAgICAgICAgICAgYXV0aG9yLmlubmVySFRNTD1gLSR7anNvbi5hdXRob3J9YDtcbiAgICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICBhbGVydCgnc29ycnkgY291bGQgbm90IGZpbmQgb3V0IGEgbmV3IHF1b3RlIGhvcGUgeW91IGFyZSBkb2luZyB3ZWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1b3RlRGl2O1xuICAgIH1cbiAgICBnZW5lcmF0ZVF1b3RlKCk7XG4gICAgcmV0dXJuIHF1b3RlRGl2O1xufVxuZXhwb3J0IHtyYW5kb21RdW90ZUdlbmVyYXRvcn07Il0sInNvdXJjZVJvb3QiOiIifQ==